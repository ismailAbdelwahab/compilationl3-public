/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AFormProgProgramme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AListFuncLdf */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AEpsLdf */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ADefFuncDf */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AAffectationI */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AIfI */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AWhileI */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ARetI */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AFunctionCallI */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AWriteI */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AElseElseBlock */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AEpsElseBlock */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce ABlocInstructionBi */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AListInstructionLi */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce AInstructionSuivIBis */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AEpsIBis */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce AOptVarLdvOptional */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AEpsLdvOptional */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce ALVarLdv */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce AEpsLdv */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce ALVarAfterCommaLdvBis */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AEpsLdvBis */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce AVarDv */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list, false);
            }
            break;
            case 23: /* reduce ADv */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce AEE */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list, false);
            }
            break;
            case 25: /* reduce AAndEE */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce AAndEAndE */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list, false);
            }
            break;
            case 27: /* reduce ACompEAndE */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce AEqualCompE */
            {
                ArrayList<Object> list = new28();
                push(goTo(14), list, false);
            }
            break;
            case 29: /* reduce ALowerThanCompE */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list, false);
            }
            break;
            case 30: /* reduce AArithLowECompE */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce APlusArithLowE */
            {
                ArrayList<Object> list = new31();
                push(goTo(15), list, false);
            }
            break;
            case 32: /* reduce AMoinsArithLowE */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list, false);
            }
            break;
            case 33: /* reduce AArithHighEArithLowE */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list, false);
            }
            break;
            case 34: /* reduce AMultArithHighE */
            {
                ArrayList<Object> list = new34();
                push(goTo(16), list, false);
            }
            break;
            case 35: /* reduce ADivArithHighE */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list, false);
            }
            break;
            case 36: /* reduce ANegEArithHighE */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list, false);
            }
            break;
            case 37: /* reduce AExclamationMarkNegE */
            {
                ArrayList<Object> list = new37();
                push(goTo(17), list, false);
            }
            break;
            case 38: /* reduce AParenthENegE */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list, false);
            }
            break;
            case 39: /* reduce AParenthesisParenthE */
            {
                ArrayList<Object> list = new39();
                push(goTo(18), list, false);
            }
            break;
            case 40: /* reduce AElementParenthE */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list, false);
            }
            break;
            case 41: /* reduce ANumberElement */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list, false);
            }
            break;
            case 42: /* reduce AFunctionCallElement */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list, false);
            }
            break;
            case 43: /* reduce AReadElement */
            {
                ArrayList<Object> list = new43();
                push(goTo(19), list, false);
            }
            break;
            case 44: /* reduce AFunctionCallDefAppFunction */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list, false);
            }
            break;
            case 45: /* reduce AListExpressionLe */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list, false);
            }
            break;
            case 46: /* reduce AEpsLe */
            {
                ArrayList<Object> list = new46();
                push(goTo(21), list, false);
            }
            break;
            case 47: /* reduce AMultipleElementsEBis */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list, false);
            }
            break;
            case 48: /* reduce AEpsEBis */
            {
                ArrayList<Object> list = new48();
                push(goTo(22), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AFormProgProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PLdvOptional pldvoptionalNode2;
        PLdf pldfNode3;
        pldvoptionalNode2 = (PLdvOptional)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pprogrammeNode1 = new AFormProgProgramme(pldvoptionalNode2, pldfNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AListFuncLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdf pldfNode1;
        {
            // Block
        PDf pdfNode2;
        PLdf pldfNode3;
        pdfNode2 = (PDf)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pldfNode1 = new AListFuncLdf(pdfNode2, pldfNode3);
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AEpsLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdf pldfNode1;
        {
            // Block

        pldfNode1 = new AEpsLdf();
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADefFuncDf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        TId tidNode2;
        TPo tpoNode3;
        PLdv pldvNode4;
        TPf tpfNode5;
        PLdvOptional pldvoptionalNode6;
        PBi pbiNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        pldvNode4 = (PLdv)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);
        pldvoptionalNode6 = (PLdvOptional)nodeArrayList5.get(0);
        pbiNode7 = (PBi)nodeArrayList6.get(0);

        pdfNode1 = new ADefFuncDf(tidNode2, tpoNode3, pldvNode4, tpfNode5, pldvoptionalNode6, pbiNode7);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAffectationI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        TId tidNode2;
        TEqual tequalNode3;
        PE peNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        peNode4 = (PE)nodeArrayList3.get(0);

        piNode1 = new AAffectationI(tidNode2, tequalNode3, peNode4);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AIfI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        TIf tifNode2;
        PE peNode3;
        TThen tthenNode4;
        PBi pbiNode5;
        PElseBlock pelseblockNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        peNode3 = (PE)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pbiNode5 = (PBi)nodeArrayList4.get(0);
        pelseblockNode6 = (PElseBlock)nodeArrayList5.get(0);

        piNode1 = new AIfI(tifNode2, peNode3, tthenNode4, pbiNode5, pelseblockNode6);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AWhileI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        TTq ttqNode2;
        PE peNode3;
        TDo tdoNode4;
        PBi pbiNode5;
        ttqNode2 = (TTq)nodeArrayList1.get(0);
        peNode3 = (PE)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pbiNode5 = (PBi)nodeArrayList4.get(0);

        piNode1 = new AWhileI(ttqNode2, peNode3, tdoNode4, pbiNode5);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ARetI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        TReturn treturnNode2;
        PE peNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        peNode3 = (PE)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        piNode1 = new ARetI(treturnNode2, peNode3, tsemicolonNode4);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AFunctionCallI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        TId tidNode2;
        TPo tpoNode3;
        PLe pleNode4;
        TPf tpfNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        pleNode4 = (PLe)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        piNode1 = new AFunctionCallI(tidNode2, tpoNode3, pleNode4, tpfNode5, tsemicolonNode6);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AWriteI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TPo tpoNode3;
        PE peNode4;
        TPf tpfNode5;
        TSemicolon tsemicolonNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        peNode4 = (PE)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        piNode1 = new AWriteI(tecrireNode2, tpoNode3, peNode4, tpfNode5, tsemicolonNode6);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AElseElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        PBi pbiNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pbiNode3 = (PBi)nodeArrayList2.get(0);

        pelseblockNode1 = new AElseElseBlock(telseNode2, pbiNode3);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AEpsElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PElseBlock pelseblockNode1;
        {
            // Block

        pelseblockNode1 = new AEpsElseBlock();
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ABlocInstructionBi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBi pbiNode1;
        {
            // Block
        TAo taoNode2;
        PLi pliNode3;
        TAf tafNode4;
        taoNode2 = (TAo)nodeArrayList1.get(0);
        pliNode3 = (PLi)nodeArrayList2.get(0);
        tafNode4 = (TAf)nodeArrayList3.get(0);

        pbiNode1 = new ABlocInstructionBi(taoNode2, pliNode3, tafNode4);
        }
	nodeList.add(pbiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AListInstructionLi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLi pliNode1;
        {
            // Block
        PI piNode2;
        PIBis pibisNode3;
        piNode2 = (PI)nodeArrayList1.get(0);
        pibisNode3 = (PIBis)nodeArrayList2.get(0);

        pliNode1 = new AListInstructionLi(piNode2, pibisNode3);
        }
	nodeList.add(pliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AInstructionSuivIBis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIBis pibisNode1;
        {
            // Block
        PI piNode2;
        PIBis pibisNode3;
        piNode2 = (PI)nodeArrayList1.get(0);
        pibisNode3 = (PIBis)nodeArrayList2.get(0);

        pibisNode1 = new AInstructionSuivIBis(piNode2, pibisNode3);
        }
	nodeList.add(pibisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AEpsIBis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PIBis pibisNode1;
        {
            // Block

        pibisNode1 = new AEpsIBis();
        }
	nodeList.add(pibisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AOptVarLdvOptional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvOptional pldvoptionalNode1;
        {
            // Block
        PLdv pldvNode2;
        TSemicolon tsemicolonNode3;
        pldvNode2 = (PLdv)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pldvoptionalNode1 = new AOptVarLdvOptional(pldvNode2, tsemicolonNode3);
        }
	nodeList.add(pldvoptionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AEpsLdvOptional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdvOptional pldvoptionalNode1;
        {
            // Block

        pldvoptionalNode1 = new AEpsLdvOptional();
        }
	nodeList.add(pldvoptionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ALVarLdv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdv pldvNode1;
        {
            // Block
        PDv pdvNode2;
        PLdvBis pldvbisNode3;
        pdvNode2 = (PDv)nodeArrayList1.get(0);
        pldvbisNode3 = (PLdvBis)nodeArrayList2.get(0);

        pldvNode1 = new ALVarLdv(pdvNode2, pldvbisNode3);
        }
	nodeList.add(pldvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AEpsLdv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdv pldvNode1;
        {
            // Block

        pldvNode1 = new AEpsLdv();
        }
	nodeList.add(pldvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ALVarAfterCommaLdvBis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvBis pldvbisNode1;
        {
            // Block
        TComma tcommaNode2;
        PDv pdvNode3;
        PLdvBis pldvbisNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pdvNode3 = (PDv)nodeArrayList2.get(0);
        pldvbisNode4 = (PLdvBis)nodeArrayList3.get(0);

        pldvbisNode1 = new ALVarAfterCommaLdvBis(tcommaNode2, pdvNode3, pldvbisNode4);
        }
	nodeList.add(pldvbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AEpsLdvBis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdvBis pldvbisNode1;
        {
            // Block

        pldvbisNode1 = new AEpsLdvBis();
        }
	nodeList.add(pldvbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AVarDv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDv pdvNode1;
        {
            // Block
        TInt tintNode2;
        TId tidNode3;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pdvNode1 = new AVarDv(tintNode2, tidNode3);
        }
	nodeList.add(pdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ADv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDv pdvNode1;
        {
            // Block
        TInt tintNode2;
        TId tidNode3;
        TCo tcoNode4;
        TNb tnbNode5;
        TCf tcfNode6;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        tnbNode5 = (TNb)nodeArrayList4.get(0);
        tcfNode6 = (TCf)nodeArrayList5.get(0);

        pdvNode1 = new ADv(tintNode2, tidNode3, tcoNode4, tnbNode5, tcfNode6);
        }
	nodeList.add(pdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AEE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE peNode1;
        {
            // Block
        PE peNode2;
        TOr torNode3;
        PAndE pandeNode4;
        peNode2 = (PE)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pandeNode4 = (PAndE)nodeArrayList3.get(0);

        peNode1 = new AEE(peNode2, torNode3, pandeNode4);
        }
	nodeList.add(peNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAndEE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE peNode1;
        {
            // Block
        PAndE pandeNode2;
        pandeNode2 = (PAndE)nodeArrayList1.get(0);

        peNode1 = new AAndEE(pandeNode2);
        }
	nodeList.add(peNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAndEAndE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAndE pandeNode1;
        {
            // Block
        PAndE pandeNode2;
        TAnd tandNode3;
        PCompE pcompeNode4;
        pandeNode2 = (PAndE)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pcompeNode4 = (PCompE)nodeArrayList3.get(0);

        pandeNode1 = new AAndEAndE(pandeNode2, tandNode3, pcompeNode4);
        }
	nodeList.add(pandeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ACompEAndE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAndE pandeNode1;
        {
            // Block
        PCompE pcompeNode2;
        pcompeNode2 = (PCompE)nodeArrayList1.get(0);

        pandeNode1 = new ACompEAndE(pcompeNode2);
        }
	nodeList.add(pandeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AEqualCompE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompE pcompeNode1;
        {
            // Block
        PCompE pcompeNode2;
        TEqual tequalNode3;
        PArithLowE parithloweNode4;
        pcompeNode2 = (PCompE)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        parithloweNode4 = (PArithLowE)nodeArrayList3.get(0);

        pcompeNode1 = new AEqualCompE(pcompeNode2, tequalNode3, parithloweNode4);
        }
	nodeList.add(pcompeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ALowerThanCompE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompE pcompeNode1;
        {
            // Block
        PCompE pcompeNode2;
        TLowerThan tlowerthanNode3;
        PArithLowE parithloweNode4;
        pcompeNode2 = (PCompE)nodeArrayList1.get(0);
        tlowerthanNode3 = (TLowerThan)nodeArrayList2.get(0);
        parithloweNode4 = (PArithLowE)nodeArrayList3.get(0);

        pcompeNode1 = new ALowerThanCompE(pcompeNode2, tlowerthanNode3, parithloweNode4);
        }
	nodeList.add(pcompeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AArithLowECompE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompE pcompeNode1;
        {
            // Block
        PArithLowE parithloweNode2;
        parithloweNode2 = (PArithLowE)nodeArrayList1.get(0);

        pcompeNode1 = new AArithLowECompE(parithloweNode2);
        }
	nodeList.add(pcompeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce APlusArithLowE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithLowE parithloweNode1;
        {
            // Block
        PArithLowE parithloweNode2;
        TPlus tplusNode3;
        PArithHighE parithhigheNode4;
        parithloweNode2 = (PArithLowE)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        parithhigheNode4 = (PArithHighE)nodeArrayList3.get(0);

        parithloweNode1 = new APlusArithLowE(parithloweNode2, tplusNode3, parithhigheNode4);
        }
	nodeList.add(parithloweNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AMoinsArithLowE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithLowE parithloweNode1;
        {
            // Block
        PArithLowE parithloweNode2;
        TMinus tminusNode3;
        PArithHighE parithhigheNode4;
        parithloweNode2 = (PArithLowE)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        parithhigheNode4 = (PArithHighE)nodeArrayList3.get(0);

        parithloweNode1 = new AMoinsArithLowE(parithloweNode2, tminusNode3, parithhigheNode4);
        }
	nodeList.add(parithloweNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AArithHighEArithLowE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithLowE parithloweNode1;
        {
            // Block
        PArithHighE parithhigheNode2;
        parithhigheNode2 = (PArithHighE)nodeArrayList1.get(0);

        parithloweNode1 = new AArithHighEArithLowE(parithhigheNode2);
        }
	nodeList.add(parithloweNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AMultArithHighE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithHighE parithhigheNode1;
        {
            // Block
        PArithHighE parithhigheNode2;
        TMult tmultNode3;
        PNegE pnegeNode4;
        parithhigheNode2 = (PArithHighE)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pnegeNode4 = (PNegE)nodeArrayList3.get(0);

        parithhigheNode1 = new AMultArithHighE(parithhigheNode2, tmultNode3, pnegeNode4);
        }
	nodeList.add(parithhigheNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ADivArithHighE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithHighE parithhigheNode1;
        {
            // Block
        PArithHighE parithhigheNode2;
        TDiv tdivNode3;
        PNegE pnegeNode4;
        parithhigheNode2 = (PArithHighE)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pnegeNode4 = (PNegE)nodeArrayList3.get(0);

        parithhigheNode1 = new ADivArithHighE(parithhigheNode2, tdivNode3, pnegeNode4);
        }
	nodeList.add(parithhigheNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ANegEArithHighE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithHighE parithhigheNode1;
        {
            // Block
        PNegE pnegeNode2;
        pnegeNode2 = (PNegE)nodeArrayList1.get(0);

        parithhigheNode1 = new ANegEArithHighE(pnegeNode2);
        }
	nodeList.add(parithhigheNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AExclamationMarkNegE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNegE pnegeNode1;
        {
            // Block
        TNot tnotNode2;
        PParenthE pparentheNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pparentheNode3 = (PParenthE)nodeArrayList2.get(0);

        pnegeNode1 = new AExclamationMarkNegE(tnotNode2, pparentheNode3);
        }
	nodeList.add(pnegeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AParenthENegE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNegE pnegeNode1;
        {
            // Block
        PParenthE pparentheNode2;
        pparentheNode2 = (PParenthE)nodeArrayList1.get(0);

        pnegeNode1 = new AParenthENegE(pparentheNode2);
        }
	nodeList.add(pnegeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AParenthesisParenthE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParenthE pparentheNode1;
        {
            // Block
        TPo tpoNode2;
        PElement pelementNode3;
        TPf tpfNode4;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        pelementNode3 = (PElement)nodeArrayList2.get(0);
        tpfNode4 = (TPf)nodeArrayList3.get(0);

        pparentheNode1 = new AParenthesisParenthE(tpoNode2, pelementNode3, tpfNode4);
        }
	nodeList.add(pparentheNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AElementParenthE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParenthE pparentheNode1;
        {
            // Block
        PElement pelementNode2;
        pelementNode2 = (PElement)nodeArrayList1.get(0);

        pparentheNode1 = new AElementParenthE(pelementNode2);
        }
	nodeList.add(pparentheNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ANumberElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TNb tnbNode2;
        tnbNode2 = (TNb)nodeArrayList1.get(0);

        pelementNode1 = new ANumberElement(tnbNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AFunctionCallElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        PAppFunction pappfunctionNode2;
        pappfunctionNode2 = (PAppFunction)nodeArrayList1.get(0);

        pelementNode1 = new AFunctionCallElement(pappfunctionNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AReadElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TLire tlireNode2;
        TPo tpoNode3;
        TPf tpfNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        tpfNode4 = (TPf)nodeArrayList3.get(0);

        pelementNode1 = new AReadElement(tlireNode2, tpoNode3, tpfNode4);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AFunctionCallDefAppFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppFunction pappfunctionNode1;
        {
            // Block
        TId tidNode2;
        TPo tpoNode3;
        PLe pleNode4;
        TPf tpfNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        pleNode4 = (PLe)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);

        pappfunctionNode1 = new AFunctionCallDefAppFunction(tidNode2, tpoNode3, pleNode4, tpfNode5);
        }
	nodeList.add(pappfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AListExpressionLe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLe pleNode1;
        {
            // Block
        PE peNode2;
        PEBis pebisNode3;
        peNode2 = (PE)nodeArrayList1.get(0);
        pebisNode3 = (PEBis)nodeArrayList2.get(0);

        pleNode1 = new AListExpressionLe(peNode2, pebisNode3);
        }
	nodeList.add(pleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AEpsLe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLe pleNode1;
        {
            // Block

        pleNode1 = new AEpsLe();
        }
	nodeList.add(pleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMultipleElementsEBis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEBis pebisNode1;
        {
            // Block
        TComma tcommaNode2;
        PE peNode3;
        PEBis pebisNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        peNode3 = (PE)nodeArrayList2.get(0);
        pebisNode4 = (PEBis)nodeArrayList3.get(0);

        pebisNode1 = new AMultipleElementsEBis(tcommaNode2, peNode3, pebisNode4);
        }
	nodeList.add(pebisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AEpsEBis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PEBis pebisNode1;
        {
            // Block

        pebisNode1 = new AEpsEBis();
        }
	nodeList.add(pebisNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 17}, {12, SHIFT, 1}, {21, REDUCE, 19}, },
			{{-1, ERROR, 1}, {0, SHIFT, 6}, },
			{{-1, ERROR, 2}, {28, ACCEPT, -1}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 7}, },
			{{-1, ERROR, 4}, {21, SHIFT, 10}, },
			{{-1, REDUCE, 21}, {20, SHIFT, 11}, },
			{{-1, REDUCE, 22}, {4, SHIFT, 13}, },
			{{-1, ERROR, 7}, {2, SHIFT, 14}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 7}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 11}, {12, SHIFT, 1}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 13}, {1, SHIFT, 17}, },
			{{-1, REDUCE, 19}, {12, SHIFT, 1}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 21}, {20, SHIFT, 11}, },
			{{-1, ERROR, 17}, {5, SHIFT, 20}, },
			{{-1, ERROR, 18}, {3, SHIFT, 21}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 17}, {12, SHIFT, 1}, {21, REDUCE, 19}, },
			{{-1, ERROR, 22}, {6, SHIFT, 23}, },
			{{-1, ERROR, 23}, {0, SHIFT, 25}, {8, SHIFT, 26}, {9, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 25}, {2, SHIFT, 32}, {23, SHIFT, 33}, },
			{{-1, ERROR, 26}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 27}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 28}, {2, SHIFT, 49}, },
			{{-1, ERROR, 29}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 25}, {8, SHIFT, 26}, {9, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, },
			{{-1, ERROR, 31}, {7, SHIFT, 53}, },
			{{-1, REDUCE, 46}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 33}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 34}, {2, SHIFT, 57}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 36}, {0, SHIFT, 34}, {1, SHIFT, 35}, {25, SHIFT, 38}, },
			{{-1, ERROR, 37}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {25, SHIFT, 38}, },
			{{-1, ERROR, 38}, {2, SHIFT, 60}, },
			{{-1, ERROR, 39}, {15, SHIFT, 61}, {22, SHIFT, 62}, },
			{{-1, REDUCE, 25}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 27}, {23, SHIFT, 64}, {24, SHIFT, 65}, },
			{{-1, REDUCE, 30}, {13, SHIFT, 66}, {17, SHIFT, 67}, },
			{{-1, REDUCE, 33}, {18, SHIFT, 68}, {19, SHIFT, 69}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 48}, {10, SHIFT, 70}, {15, SHIFT, 61}, },
			{{-1, ERROR, 49}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 50}, {15, SHIFT, 61}, {21, SHIFT, 72}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 25}, {8, SHIFT, 26}, {9, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 48}, {15, SHIFT, 61}, {20, SHIFT, 74}, },
			{{-1, ERROR, 55}, {3, SHIFT, 76}, },
			{{-1, REDUCE, 4}, {15, SHIFT, 61}, },
			{{-1, REDUCE, 46}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 58}, {3, SHIFT, 78}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 60}, {3, SHIFT, 79}, },
			{{-1, ERROR, 61}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 62}, {6, SHIFT, 23}, },
			{{-1, ERROR, 63}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 64}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 65}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 66}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 67}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 68}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 69}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, ERROR, 70}, {6, SHIFT, 23}, },
			{{-1, ERROR, 71}, {3, SHIFT, 90}, {15, SHIFT, 61}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 74}, {0, SHIFT, 34}, {1, SHIFT, 35}, {2, SHIFT, 36}, {16, SHIFT, 37}, {25, SHIFT, 38}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 76}, {21, SHIFT, 92}, },
			{{-1, ERROR, 77}, {3, SHIFT, 93}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 24}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 26}, {23, SHIFT, 64}, {24, SHIFT, 65}, },
			{{-1, REDUCE, 28}, {13, SHIFT, 66}, {17, SHIFT, 67}, },
			{{-1, REDUCE, 29}, {13, SHIFT, 66}, {17, SHIFT, 67}, },
			{{-1, REDUCE, 31}, {18, SHIFT, 68}, {19, SHIFT, 69}, },
			{{-1, REDUCE, 32}, {18, SHIFT, 68}, {19, SHIFT, 69}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 11}, {11, SHIFT, 94}, },
			{{-1, ERROR, 90}, {21, SHIFT, 96}, },
			{{-1, REDUCE, 48}, {15, SHIFT, 61}, {20, SHIFT, 74}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 94}, {6, SHIFT, 23}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 10}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {9, 15}, },
			{{-1, 9}, },
			{{-1, 51}, {23, 30}, },
			{{-1, 95}, },
			{{-1, 24}, {62, 81}, {70, 89}, {94, 98}, },
			{{-1, 31}, },
			{{-1, 52}, {51, 73}, },
			{{-1, 3}, {21, 22}, },
			{{-1, 4}, {14, 18}, },
			{{-1, 12}, {16, 19}, },
			{{-1, 5}, {11, 16}, },
			{{-1, 54}, {26, 39}, {27, 48}, {29, 50}, {33, 56}, {49, 71}, {74, 91}, },
			{{-1, 40}, {61, 80}, },
			{{-1, 41}, {63, 82}, },
			{{-1, 42}, {64, 83}, {65, 84}, },
			{{-1, 43}, {66, 85}, {67, 86}, },
			{{-1, 44}, {68, 87}, {69, 88}, },
			{{-1, 45}, {37, 59}, },
			{{-1, 46}, {36, 58}, },
			{{-1, 47}, },
			{{-1, 55}, {57, 77}, },
			{{-1, 75}, {91, 97}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: id, 'entier', ';', EOF",
			"expecting: id",
			"expecting: EOF",
			"expecting: id, EOF",
			"expecting: ';'",
			"expecting: ')', ',', ';'",
			"expecting: ')', '[', ',', ';'",
			"expecting: '('",
			"expecting: id, '{', EOF",
			"expecting: 'entier'",
			"expecting: ')', ';'",
			"expecting: nb",
			"expecting: ')', 'entier'",
			"expecting: ']'",
			"expecting: ')'",
			"expecting: '{', 'entier', ';'",
			"expecting: '{'",
			"expecting: id, 'tantque', 'si', 'ecrire', 'retour'",
			"expecting: '(', '='",
			"expecting: id, nb, '(', '!', 'lire'",
			"expecting: id, '}', 'tantque', 'si', 'ecrire', 'retour'",
			"expecting: '}'",
			"expecting: id, nb, '(', ')', '!', 'lire'",
			"expecting: id, ')', '}', 'tantque', 'si', 'alors', '+', '&', '|', '-', '*', '/', ',', ';', 'faire', '=', '<', 'ecrire', 'retour'",
			"expecting: id, nb, 'lire'",
			"expecting: id, nb, '(', 'lire'",
			"expecting: '|', 'faire'",
			"expecting: id, ')', '}', 'tantque', 'si', 'alors', '&', '|', ',', ';', 'faire', 'ecrire', 'retour'",
			"expecting: id, ')', '}', 'tantque', 'si', 'alors', '&', '|', ',', ';', 'faire', '=', '<', 'ecrire', 'retour'",
			"expecting: id, ')', '}', 'tantque', 'si', 'alors', '+', '&', '|', '-', ',', ';', 'faire', '=', '<', 'ecrire', 'retour'",
			"expecting: 'alors', '|'",
			"expecting: '|', ';'",
			"expecting: id, '}', 'tantque', 'si', 'sinon', 'ecrire', 'retour', EOF",
			"expecting: ')', '|', ','",
			"expecting: id, '}', 'tantque', 'si', '|', 'ecrire', 'retour'",
			"expecting: ')', '|'",
			"expecting: id, '}', 'tantque', 'si', 'sinon', 'ecrire', 'retour'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 2, 3, 8, 9, 10, 11, 12, 2, 5, 13, 14, 10, 5, 15, 16, 17, 3, 18, 19, 19, 7, 19, 20, 21, 22, 19, 7, 23, 24, 25, 7, 26, 27, 28, 29, 23, 23, 23, 23, 23, 30, 19, 31, 20, 21, 32, 33, 14, 34, 22, 14, 23, 14, 19, 16, 19, 19, 19, 19, 19, 19, 19, 16, 35, 20, 21, 19, 14, 4, 14, 23, 23, 27, 20, 28, 29, 29, 23, 23, 23, 23, 36, 4, 33, 20, 23, 16, 20, 20, 14, 20, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
