/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AAndEAndE extends PAndE
{
    private PAndE _andE_;
    private TAnd _and_;
    private PCompE _compE_;

    public AAndEAndE()
    {
        // Constructor
    }

    public AAndEAndE(
        @SuppressWarnings("hiding") PAndE _andE_,
        @SuppressWarnings("hiding") TAnd _and_,
        @SuppressWarnings("hiding") PCompE _compE_)
    {
        // Constructor
        setAndE(_andE_);

        setAnd(_and_);

        setCompE(_compE_);

    }

    @Override
    public Object clone()
    {
        return new AAndEAndE(
            cloneNode(this._andE_),
            cloneNode(this._and_),
            cloneNode(this._compE_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndEAndE(this);
    }

    public PAndE getAndE()
    {
        return this._andE_;
    }

    public void setAndE(PAndE node)
    {
        if(this._andE_ != null)
        {
            this._andE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._andE_ = node;
    }

    public TAnd getAnd()
    {
        return this._and_;
    }

    public void setAnd(TAnd node)
    {
        if(this._and_ != null)
        {
            this._and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._and_ = node;
    }

    public PCompE getCompE()
    {
        return this._compE_;
    }

    public void setCompE(PCompE node)
    {
        if(this._compE_ != null)
        {
            this._compE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compE_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._andE_)
            + toString(this._and_)
            + toString(this._compE_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._andE_ == child)
        {
            this._andE_ = null;
            return;
        }

        if(this._and_ == child)
        {
            this._and_ = null;
            return;
        }

        if(this._compE_ == child)
        {
            this._compE_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._andE_ == oldChild)
        {
            setAndE((PAndE) newChild);
            return;
        }

        if(this._and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(this._compE_ == oldChild)
        {
            setCompE((PCompE) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
