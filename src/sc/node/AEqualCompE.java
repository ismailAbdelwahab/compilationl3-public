/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AEqualCompE extends PCompE
{
    private PCompE _compE_;
    private TEqual _equal_;
    private PArithLowE _arithLowE_;

    public AEqualCompE()
    {
        // Constructor
    }

    public AEqualCompE(
        @SuppressWarnings("hiding") PCompE _compE_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") PArithLowE _arithLowE_)
    {
        // Constructor
        setCompE(_compE_);

        setEqual(_equal_);

        setArithLowE(_arithLowE_);

    }

    @Override
    public Object clone()
    {
        return new AEqualCompE(
            cloneNode(this._compE_),
            cloneNode(this._equal_),
            cloneNode(this._arithLowE_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEqualCompE(this);
    }

    public PCompE getCompE()
    {
        return this._compE_;
    }

    public void setCompE(PCompE node)
    {
        if(this._compE_ != null)
        {
            this._compE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compE_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public PArithLowE getArithLowE()
    {
        return this._arithLowE_;
    }

    public void setArithLowE(PArithLowE node)
    {
        if(this._arithLowE_ != null)
        {
            this._arithLowE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arithLowE_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._compE_)
            + toString(this._equal_)
            + toString(this._arithLowE_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._compE_ == child)
        {
            this._compE_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._arithLowE_ == child)
        {
            this._arithLowE_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._compE_ == oldChild)
        {
            setCompE((PCompE) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._arithLowE_ == oldChild)
        {
            setArithLowE((PArithLowE) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
