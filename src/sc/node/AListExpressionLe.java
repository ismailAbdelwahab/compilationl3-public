/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AListExpressionLe extends PLe
{
    private PE _e_;
    private PEBis _eBis_;

    public AListExpressionLe()
    {
        // Constructor
    }

    public AListExpressionLe(
        @SuppressWarnings("hiding") PE _e_,
        @SuppressWarnings("hiding") PEBis _eBis_)
    {
        // Constructor
        setE(_e_);

        setEBis(_eBis_);

    }

    @Override
    public Object clone()
    {
        return new AListExpressionLe(
            cloneNode(this._e_),
            cloneNode(this._eBis_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListExpressionLe(this);
    }

    public PE getE()
    {
        return this._e_;
    }

    public void setE(PE node)
    {
        if(this._e_ != null)
        {
            this._e_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e_ = node;
    }

    public PEBis getEBis()
    {
        return this._eBis_;
    }

    public void setEBis(PEBis node)
    {
        if(this._eBis_ != null)
        {
            this._eBis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eBis_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._e_)
            + toString(this._eBis_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._e_ == child)
        {
            this._e_ = null;
            return;
        }

        if(this._eBis_ == child)
        {
            this._eBis_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._e_ == oldChild)
        {
            setE((PE) newChild);
            return;
        }

        if(this._eBis_ == oldChild)
        {
            setEBis((PEBis) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
