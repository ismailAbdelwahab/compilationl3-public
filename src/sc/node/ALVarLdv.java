/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ALVarLdv extends PLdv
{
    private PDv _dv_;
    private PLdvBis _ldvBis_;

    public ALVarLdv()
    {
        // Constructor
    }

    public ALVarLdv(
        @SuppressWarnings("hiding") PDv _dv_,
        @SuppressWarnings("hiding") PLdvBis _ldvBis_)
    {
        // Constructor
        setDv(_dv_);

        setLdvBis(_ldvBis_);

    }

    @Override
    public Object clone()
    {
        return new ALVarLdv(
            cloneNode(this._dv_),
            cloneNode(this._ldvBis_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALVarLdv(this);
    }

    public PDv getDv()
    {
        return this._dv_;
    }

    public void setDv(PDv node)
    {
        if(this._dv_ != null)
        {
            this._dv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dv_ = node;
    }

    public PLdvBis getLdvBis()
    {
        return this._ldvBis_;
    }

    public void setLdvBis(PLdvBis node)
    {
        if(this._ldvBis_ != null)
        {
            this._ldvBis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ldvBis_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dv_)
            + toString(this._ldvBis_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dv_ == child)
        {
            this._dv_ = null;
            return;
        }

        if(this._ldvBis_ == child)
        {
            this._ldvBis_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dv_ == oldChild)
        {
            setDv((PDv) newChild);
            return;
        }

        if(this._ldvBis_ == oldChild)
        {
            setLdvBis((PLdvBis) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
