/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AListInstructionLi extends PLi
{
    private PI _i_;
    private PIBis _iBis_;

    public AListInstructionLi()
    {
        // Constructor
    }

    public AListInstructionLi(
        @SuppressWarnings("hiding") PI _i_,
        @SuppressWarnings("hiding") PIBis _iBis_)
    {
        // Constructor
        setI(_i_);

        setIBis(_iBis_);

    }

    @Override
    public Object clone()
    {
        return new AListInstructionLi(
            cloneNode(this._i_),
            cloneNode(this._iBis_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListInstructionLi(this);
    }

    public PI getI()
    {
        return this._i_;
    }

    public void setI(PI node)
    {
        if(this._i_ != null)
        {
            this._i_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._i_ = node;
    }

    public PIBis getIBis()
    {
        return this._iBis_;
    }

    public void setIBis(PIBis node)
    {
        if(this._iBis_ != null)
        {
            this._iBis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._iBis_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._i_)
            + toString(this._iBis_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._i_ == child)
        {
            this._i_ = null;
            return;
        }

        if(this._iBis_ == child)
        {
            this._iBis_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._i_ == oldChild)
        {
            setI((PI) newChild);
            return;
        }

        if(this._iBis_ == oldChild)
        {
            setIBis((PIBis) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
