/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import sc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgProgramme(AProgProgramme node);
    void caseAListFuncLdf(AListFuncLdf node);
    void caseAEpsLdf(AEpsLdf node);
    void caseADefFuncDf(ADefFuncDf node);
    void caseAOptListVarLdvOptional(AOptListVarLdvOptional node);
    void caseAEpsLdvOptional(AEpsLdvOptional node);
    void caseAListVarLdv(AListVarLdv node);
    void caseAEpsLdv(AEpsLdv node);
    void caseAListVarAfterCommaLdvBis(AListVarAfterCommaLdvBis node);
    void caseAEpsLdvBis(AEpsLdvBis node);
    void caseADefVarDv(ADefVarDv node);
    void caseADefVarArrayDv(ADefVarArrayDv node);
    void caseADefVarAffectationDv(ADefVarAffectationDv node);
    void caseABlocInstBi(ABlocInstBi node);
    void caseAListInstLi(AListInstLi node);
    void caseAListInstNextIBis(AListInstNextIBis node);
    void caseAEpsIBis(AEpsIBis node);
    void caseAAffectI(AAffectI node);
    void caseAAffectInArrayI(AAffectInArrayI node);
    void caseAIfI(AIfI node);
    void caseAWhileI(AWhileI node);
    void caseARetI(ARetI node);
    void caseAFuncCallI(AFuncCallI node);
    void caseAWriteI(AWriteI node);
    void caseAElseElseBlock(AElseElseBlock node);
    void caseAEpsElseBlock(AEpsElseBlock node);
    void caseAEE(AEE node);
    void caseAAndEE(AAndEE node);
    void caseAAndEAndE(AAndEAndE node);
    void caseACompEAndE(ACompEAndE node);
    void caseAEqualCompE(AEqualCompE node);
    void caseALowerThanCompE(ALowerThanCompE node);
    void caseAArithLowECompE(AArithLowECompE node);
    void caseAPlusArithLowE(APlusArithLowE node);
    void caseAMoinsArithLowE(AMoinsArithLowE node);
    void caseAArithHighEArithLowE(AArithHighEArithLowE node);
    void caseAMultArithHighE(AMultArithHighE node);
    void caseADivArithHighE(ADivArithHighE node);
    void caseANegEArithHighE(ANegEArithHighE node);
    void caseANotNegE(ANotNegE node);
    void caseAParenthENegE(AParenthENegE node);
    void caseAParenthParenthE(AParenthParenthE node);
    void caseAElementParenthE(AElementParenthE node);
    void caseANumberElement(ANumberElement node);
    void caseAVariableElement(AVariableElement node);
    void caseAArrayElementElement(AArrayElementElement node);
    void caseAReadElement(AReadElement node);
    void caseAFuncCallElement(AFuncCallElement node);
    void caseADefFuncCallAppFunction(ADefFuncCallAppFunction node);
    void caseAListExpLe(AListExpLe node);
    void caseAEpsLe(AEpsLe node);
    void caseAExpAfterCommaEBis(AExpAfterCommaEBis node);
    void caseAEpsEBis(AEpsEBis node);

    void caseTNb(TNb node);
    void caseTPo(TPo node);
    void caseTPf(TPf node);
    void caseTCo(TCo node);
    void caseTCf(TCf node);
    void caseTAo(TAo node);
    void caseTAf(TAf node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTEqual(TEqual node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTLowerThan(TLowerThan node);
    void caseTVarType(TVarType node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTRead(TRead node);
    void caseTWrite(TWrite node);
    void caseTReturn(TReturn node);
    void caseTId(TId node);
    void caseTEspaces(TEspaces node);
    void caseTCommentaire(TCommentaire node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
