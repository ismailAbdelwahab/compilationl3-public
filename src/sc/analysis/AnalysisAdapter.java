/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgProgramme(AProgProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularLdf(ARegularLdf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsLdf(AEpsLdf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularDf(ARegularDf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularLdvOptional(ARegularLdvOptional node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsLdvOptional(AEpsLdvOptional node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularLdv(ARegularLdv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsLdv(AEpsLdv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularLdvBis(ARegularLdvBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsLdvBis(AEpsLdvBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularVariableDv(ARegularVariableDv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularArrayDv(ARegularArrayDv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularBi(ARegularBi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularLi(ARegularLi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularIBis(ARegularIBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsIBis(AEpsIBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAffectI(AAffectI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfI(AIfI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileI(AWhileI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnI(AReturnI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncCallI(AFuncCallI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWriteI(AWriteI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularVar(ARegularVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayVar(AArrayVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularElseBlock(ARegularElseBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsElseBlock(AEpsElseBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularE(ARegularE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassE(APassE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularAndE(ARegularAndE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassAndE(APassAndE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualCompE(AEqualCompE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALowerThanCompE(ALowerThanCompE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassCompE(APassCompE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusArithLowE(APlusArithLowE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoinsArithLowE(AMoinsArithLowE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassArithLowE(APassArithLowE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultArithHighE(AMultArithHighE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivArithHighE(ADivArithHighE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassArithHighE(APassArithHighE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularNegE(ARegularNegE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassNegE(APassNegE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularParenthE(ARegularParenthE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassParenthE(APassParenthE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberElement(ANumberElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableElement(AVariableElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayElement(AArrayElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReadElement(AReadElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncCallElement(AFuncCallElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularAppFunction(ARegularAppFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularLe(ARegularLe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsLe(AEpsLe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARegularEBis(ARegularEBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsEBis(AEpsEBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNb(TNb node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPo(TPo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPf(TPf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCo(TCo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCf(TCf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAo(TAo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAf(TAf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLowerThan(TLowerThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVarType(TVarType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRead(TRead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWrite(TWrite node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaces(TEspaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentaire(TCommentaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
